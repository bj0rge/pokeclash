{"version":3,"sources":["endpoints/appusers/appusers.post.ts"],"names":[],"mappings":";;AACA,6CAA8C;AAE9C,SAAgB,MAAM,CAAC,GAAY,EAAE,GAAa;IAE9C,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxD,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC,QAAQ,EAAE,CAAC;IACvD,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC,OAAO,EAAE,CAAC;IAE9D,GAAG,CAAC,mBAAmB,EAAE;SACpB,IAAI,CAAC,UAAS,MAAM;QACjB,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;YAClB,OAAO,mBAAU,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;iBAC7B,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC9C,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;SACnD;aAAM;YACH,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;SAC7D;IACL,CAAC,CAAC,CAAC;AACX,CAAC;AAhBD,wBAgBC;AAED,SAAgB,KAAK,CAAC,GAAY,EAAE,GAAa;IAE7C,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxD,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC,QAAQ,EAAE,CAAC;IACvD,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC,OAAO,EAAE,CAAC;IAE9D,GAAG,CAAC,mBAAmB,EAAE;SACpB,IAAI,CAAC,UAAS,MAAM;QACjB,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;YAClB,OAAO,mBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACrC;aAAM;YACH,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;SAC7D;IACL,CAAC,CAAC;SACD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9C,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,CAAC;AAhBD,sBAgBC","file":"appusers.post.js","sourcesContent":["import { Request, Response } from 'express';\r\nimport { AppUserDao } from '../../dao/_index';\r\n\r\nexport function create(req: Request, res: Response) {\r\n\r\n    req.checkBody('pwd', 'Password is required').notEmpty();\r\n    req.checkBody('email', 'Email is required').notEmpty();\r\n    req.checkBody('email', 'A valid email is required').isEmail();\r\n\r\n    req.getValidationResult()\r\n        .then(function(result) {\r\n            if (result.isEmpty()) {\r\n                return AppUserDao.create(req.body)\r\n                    .then(appuser => res.status(201).send(appuser))\r\n                    .catch(error => res.boom.badRequest(error));\r\n            } else {\r\n                res.boom.badRequest('Validation errors', result.mapped());\r\n            }\r\n        });\r\n}\r\n\r\nexport function login(req: Request, res: Response) {\r\n\r\n    req.checkBody('pwd', 'Password is required').notEmpty();\r\n    req.checkBody('email', 'Email is required').notEmpty();\r\n    req.checkBody('email', 'A valid email is required').isEmail();\r\n\r\n    req.getValidationResult()\r\n        .then(function(result) {\r\n            if (result.isEmpty()) {\r\n                return AppUserDao.login(req.body);\r\n            } else {\r\n                res.boom.badRequest('Validation errors', result.mapped());\r\n            }\r\n        })\r\n        .then(appuser => res.status(200).send(appuser))\r\n        .catch(error => res.boom.badRequest(error));\r\n}\r\n"],"sourceRoot":"../../../src"}
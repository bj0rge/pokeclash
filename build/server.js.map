{"version":3,"sources":["server.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AACnC,mCAAmC;AACnC,qCAAqC;AACrC,iCAAiC;AACjC,6BAA6B;AAC7B,6CAA+C;AAE/C,0CAA0C;AAE1C,MAAM,IAAI,GAAW,IAAI,CAAC;AAM1B,MAAa,MAAM;IAIf;QACI,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QAGrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;YACd,oBAAoB,EAAE,GAAG;SAC5B,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,wBAAU,CAAC;YACpB,QAAQ,EAAE,IAAI;SACjB,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAI,EAAE,CAAC,CAAC;QACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,4CAA4C,EAAE,IAAI,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;CACJ;AA1BD,wBA0BC;AACD,IAAI,MAAM,EAAE,CAAC","file":"server.js","sourcesContent":["import * as express from 'express';\r\nimport * as winston from 'winston';\r\nimport * as boom from 'express-boom';\r\nimport * as morgan from 'morgan';\r\nimport * as cors from 'cors';\r\nimport { json, urlencoded } from 'body-parser';\r\nimport { Express } from 'express';\r\nimport * as routes from './routes/_index';\r\n\r\nconst PORT: number = 3030;\r\n\r\n/**\r\n * Root class of your node server.\r\n * Can be used for basic configurations, for instance starting up the server or registering middleware.\r\n */\r\nexport class Server {\r\n\r\n    private app: Express;\r\n\r\n    constructor() {\r\n        this.app = express();\r\n\r\n        // Express middleware\r\n        this.app.use(cors({\r\n            optionsSuccessStatus: 200,\r\n        }));\r\n        this.app.use(urlencoded({\r\n            extended: true,\r\n        }));\r\n        this.app.use(json());\r\n        this.app.use(boom());\r\n        this.app.use(morgan('combined'));\r\n        this.app.listen(PORT, () => {\r\n            winston.log('info', '--> Server successfully started at port %d', PORT);\r\n        });\r\n        routes.initRoutes(this.app);\r\n    }\r\n\r\n    getApp() {\r\n        return this.app;\r\n    }\r\n}\r\nnew Server();\r\n"],"sourceRoot":"../src"}